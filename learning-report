http://tldp.org/LDP/abs/html/这个网站是一个很详细的高级Shell脚本编程手册；它全面且系统地讲解了bash编程的语法、习惯用法。
《Advanced Bash-Scripting Guide》对我这种初学者来说非常实用，由浅入深，非常详细，也有很多具体的案例。接下来将介绍这本书的大致内容。
第一部分：介绍
  首先介绍shell编程的意义：把复杂的问题分解成简单的小问题，然后再把各部分功能组合起来解决复杂问题；其次介绍如何编写及运行shell程序。
  
第二部分：基础
  1.特殊字符：
    #(注释符)  ;(命令分隔符)  ;;(case语句分支的结束符)  .("点"命令[圆点],等同于source；或者文件名的组成部分；或者当前目录；或者匹配任意一个字符) 
    "(部分引用) '(完全引用) ,(逗号操作符)  \(转义符)  /(文件路径的分隔符) `(命令替换) :(空命令)  !(取反操作符)  *(通配符；或者算术操作符) 
    ?(测试操作符；或者通配符) $(变量替换;或者行的结尾)   ${}(参数替换) $*, $@(位置参数)  $?(保存退出码值) $$(进程ID变量) ()(命令组;或者数组初始化)
    {xxx,yyy,zzz,...}(扩展支持) {}(代码块) [ ](测试；或者数组元素；字符集的范围) [[ ]](测试) (())(整数扩展) > &> >& >> <(重定向)
    <<(重定向) <<<(重定向) <, >(ASCII比较) |(管道)  \<, \>(在 regular expression中的单词界线)  >|(强迫重定向) ||(或逻辑操作符) &(在后台运行作业)
    &&(与逻辑操作符)  -(选项, 前缀；或者用于stdin或stdout重定向的源或目的；或者先前的工作目录；或者负号或减号) =(等号)  +(加;或者选项)
    %(取模) ~(主目录)  ~+(当前工作目录)  ~-(先前工作目录)  =~(正则表达式匹配) ^(行首) 控制字符(更改终端行为或文本显示)
    空白(用做函数的分隔符,分隔命令或变量)  
    
  2.变量与参数介绍
    主要包括变量替换、变量赋值、无类型的Bash变量、特殊变量类型：
    1) 其中变量替换与赋值：VARIABLE=value；变量引用：$variable 或 {variable};
    2) Bash不以"类型"来区分变量；本质上来说，Bash变量是字符串，但是根据环境的不同，Bash允许变量有整数计算和比较，其决定因素是变量的值是不是只含有数字；
    3) 特殊变量类型包括：局部变量，环境变量和位置变量。

  3.引用
    1) 引用变量推荐使用双引号；除了前缀($)、后引符(`)和转义符(\)外，使用双引号会使shell不再解释引号中其它的特殊字符，如"$variable"表示一个变量；
    2) 单引号和双引号类似，但是在单引号内，除了字符'，每个特殊字符都只是字面的意思。因此，在单引号内的字符$的特殊意思无效了；
    3) 转义是引用单字符的方法：在单个字符前面的转义符(\)告诉shell不必特殊解释这个字符，只把它当成字面上的意思；
    4) 特殊的转义字符组合：\n(表示新行) \r(表示回车)  \t(表示水平的制表符)  \v(表示垂直的制表符)  \b(表示后退符) \a(表示“警告”（蜂鸣或是闪动）)
       \0xx(翻译成ASCII码为八进制0xx所表示的字符) \"(表示引号(")的字面意思)  \$(表示美元符（$）的字面意思) \\(表示反斜杠（\）的字面意思)
       
  4.退出及退出状态
    1) exit命令一般用于结束一个脚本，并返回一个值给父进程；
    2) 每一个命令都能返回一个退出状态,一个命令执行成功返回0，一个执行不成功的命令则返回一个非零值，此值通常可以被解释成一个对应的错误值；
    3) 脚本里的函数和脚本自身都会返回一个退出状态码,在脚本或函数里被执行的最后一个命令将决定退出状态码；
    4) exit nnn 命令将会返回shell一个nnn的退出状态码;
    5) $?变量保存了最后一个命令执行后的退出状态。

  5.测试
    1) 测试结构
      if/then结构 test测试命令 [...]测试命令 [[...]]测试命令 elif/then结构 ((...))结构
    2) 文件测试操作符
      -e(文件存在)  -a(文件存在)  -f(文件是一个普通文件(不是一个目录或是一个设备文件)) -s(文件大小不为零) -d(文件是一个目录) -b(文件是一个块设备)
      -c(文件是一个字符设备(键盘, 调制解调器, 声卡, 等等.)) -p(文件是一个管道) -h(文件是一个符号链接) -L(文件是一个符号链接) -S(文件是一个socket)
      -t(文件(描述符)与一个终端设备相关)  -r(文件是否可读 (指运行这个测试命令的用户的读权限)) -w(文件是否可写 (指运行这个测试命令的用户的读权限))
      -x(文件是否可执行 (指运行这个测试命令的用户的读权限))  -g(文件或目录的设置-组-ID(sgid)标记被设置)  -u(文件的设置-用户-ID(suid)标志被设置)
      -k(粘住位设置) -O(你是文件拥有者) -G(你所在组和文件的group-id相同)  -N(文件最后一次读后被修改)   f1 -nt f2(文件f1比f2新)
      f1 -ot f2(文件f1比f2旧)   f1 -ef f2(文件f1和f2 是相同文件的硬链接)    !("非") 
    3) 其他比较操作符
      i) 整数比较：-eq(等于 if [ "$a" -eq "$b" ])   -ne(不等于  if [ "$a" -ne "$b" ])    -gt(大于  if [ "$a" -gt "$b" ])  
                  -ge(大于等于  if [ "$a" -ge "$b" ])    -lt(小于  if [ "$a" -lt "$b" ])   -le(小于等于  if [ "$a" -le "$b" ])
                  <(小于(在双括号里使用) (("$a" < "$b")))   <=(小于等于(在双括号里使用)   (("$a" <= "$b")))
                  >(大于(在双括号里使用) (("$a" > "$b")))   >=(大于等于(在双括号里使用)   (("$a" >= "$b")))
      j) 字符串比较: =(等于    if [ "$a" = "$b" ])   ==(等于 if [ "$a" == "$b" ])    !=(不相等  if [ "$a" != "$b" ])
                    <(小于    if [[ "$a" < "$b" ]]  if [ "$a" \< "$b" ])    >(大于  if [[ "$a" > "$b" ]]  if [ "$a" \> "$b" ])
                    -z(字符串为"null"，即是指字符串长度为零)   -n(字符串不为"null"，即长度不为零)
      k)混合比较：-a(逻辑与   如果exp1和exp2都为真，则exp1 -a exp2返回真)    -o(逻辑或  只要exp1和exp2任何一个为真，则exp1 -o exp2 返回真)
    4) 嵌套的if/then条件测试
      if [ ... ]
      then
        if [ ... ]
        then
              COMMAND
        fi
      fi
      
  6.操作符和相关主题
    1) 操作符
      =(变量赋值) +(加)  -(减)  *(乘)  /(除)  **(求幂)  %(求模) +=(加-等) -=(减-等) *=(乘-等) /=(除-等) %=(模-等) <<(位左移) <<=(位左移赋值)
      >>(位右移) >>=(位右移赋值) &(位与)  &=(位于赋值)  |(位或) |=(位或赋值)  ~(位反) !(位非) ^(位或) ^=(位或赋值) &&(逻辑与) ||(逻辑或)
      ,(逗号操作符)
    2) 数字常量：前缀为0的数字是八进制数；前缀为0x的数字是十六进制数；
    3) 双括号构造：((...))结构允许算术扩展和评估；
    4) 运算符优先级：较高优先级操作在较低优先级操作之前执行。

第三部分：进阶
  1.变量进阶
    1) 内部变量
      i) 内建变量:$BASH、$BASH_ENV、$BASH_SUBSHELL、$BASH_VERSINFO[n]、$BASH_VERSION、$DIRSTACK、$EDITOR、$EUID、$FUNCNAME、$GLOBIGNORE
                  $GROUPS、$HOME、$HOSTNAME、$HOSTTYPE、$IFS、$IGNOREEOF、$LC_COLLATE、$LC_CTYPE、$LINENO、$MACHTYPE、$OLDPWD、$OSTYPE
                  $PATH、$PIPESTATUS、$PPID、$PROMPT_COMMAND、$PS1、$PS2、$PS3、$PS4、$PWD、$REPLY、$SECONDS、$SHELLOPTS、$SHLVL、$TMOUT
                  $UID
      j) 位置参数:$0, $1, $2、$#、$*、$@
      k) 特殊参数:$-、$!、$_、$?、$$
    2) 键入变量（declare 或者 typeset）的选项：-r、-i、-a、-f、-x、-x var=$value
    3) $RANDOM: 产生随机整数，$RANDOM是Bash的一个返回伪随机整数(范围为0 - 32767)的内部函数
   
  2.字符串处理
    1) 字符串长度
        ${#string}
        expr length $string
        expr "$string" : '.*'
    2) 匹配字符串开头的子串的长度
        expr match "$string" '$substring'
        expr "$string" : '$substring'
    3) 索引        
        expr index $string $substring 
    4) 子串提取
        ${string:position}    
        ${string:position:length}
        expr substr $string $position $length
        expr match "$string" '\($substring\)'
        expr "$string" : '\($substring\)'
        expr match "$string" '.*\($substring\)'
        expr "$string" : '.*\($substring\)'
    5) 子串移动
        ${string#substring}
        ${string##substring}
        ${string%substring}
        ${string%%substring}
    5) 子串替换
        ${string/substring/replacement}
        ${string//substring/replacement}
        ${string/#substring/replacement}
        ${string/%substring/replacement}
    6) 用awk处理字符串  
 
   3.循环与分支
    1) 循环就是重复一些命令的代码块,如果条件不满足就退出循环.一下为三种单层循环：
      i) for loops
          for arg in [list]
          do 
             command(s)... 
          done
      j) while
          while [condition]
          do 
            command... 
          done
      k) until        
          until [condition-is-true]
          do 
             command... 
          done
    2) 嵌套循环就是在一个循环中还有一个循环,内部循环在外部循环体中；
    3) 循环控制：break命令将会跳出循环；continue命令将会跳过本次循环下边的语句,直接进入下次循环；
    4) 测试与分支：case和select结构。
    
   4.命令替换：反引号（`...`）、$（...）
   
   5.算数扩展   
    1) 反引号的算术扩展：如z=`expr $z + 3`；
    2) 使用双括号, 和let形式的算术扩展。
   
第四部分：命令
  1.内部命令和Builtins
    1) 一个Builtin是包含在Bash工作集上的一个命令，性能比外部命令好；
    2) I/O命令：echo、printf、read；
    3) Filesystem命令：cd、pwd、pushd、popd、dirs；
    4) 变量：let、eval、set、unset、export、declare, typeset、readonly、getopts；
    5) 脚本行为：source, .、exit、exec、shopt、caller；
    6) 命令：true、false、type [cmd]、hash [cmds]、bind、help。
    
  2.外部过滤器,程序与命令
    1) 基本命令：ls、cat,tac、rev、cp、mv、rm、rmdir、mkdir、chmod、chattr、ln、man，info
    2) 复杂命令：find、xargs、expr
    3) 时间/日期命令：date、zdump、time、touch、at、batch、cal、sleep、usleep、hwclock,clock
    4) 文本处理命令：sort、tsort、uniq、expend、unexpend、cut、paste、join、head、tail、grep、look、sed、awk、wc、tr、fold、fmt、col
                    column、colrm、nl、pr、gettext、msgfmt、iconv、recode、TeX,gs、enscript、groff,tbl,eqn、lex,yacc
    5) 文件与归档命令：tar、shar、ar、rpm、cpio、rpm2cpio、gzip、bzip2、compress,uncompress、sq、zip, unzip、unarc, unarj, unrar、file
                      which、whereis、whatis、vdir、locate, slocate、readlink、strings、diff, patch、diff3、sdiff、cmp、comm等等
    6) 通信命令：host、ipcalc、nslookup、dig、traceroute、ping
    7) 终端控制命令：tput、infocmp、reset、clear、script
    8) 数学命令：factor、bc、dc、awk
    9) 其他命令：jot, seq、getopt、run-parts、yes、banner、printenv、lp、tee、mkfifo、pathchk、dd、od、hexdump、objdump、mcookie、units
                m4、doexec、dialog、sox
     
  3.系统和管理员命令:users、groups、chown, chgrp、useradd, userdel、usermod、groupmod、id、who、w、logname、su、sudo、passwd、ac、last
                    newgrp、tty、stty、setterm、tset、setserial、getty,agetty、mesg、wall、uname、arch、lastcomm、lastlog、lsof、strance
                    nmap、nc、free、procinfo、lsdev、du、df、dmesg、stat、vmstat、netstat、uptime、hostname、hostid、sar、readelf、size
                    logger、logrotate、ps、pgrep、pkill、pstree、top等等
      
第五部分：高级主题 
   1. 正则表达式
      一个正则表达式包含下面一个或者多个项：
      1) 字符集;
      2) 锚:例如^和$;
      3) 修饰符;
      4) * -- 匹配前一个字符的任意多次;
      5) . -- 匹配除了新行符之外的任意一个字符;
      6) ^ -- 匹配一行的开头;
      7) $ -- 在正则表达式中匹配行尾;
      8) [...] -- 在正则表达式中表示匹配括号中的一个字符;
      9) \ -- 转义(escapes) 一个特殊的字符;
      10) \<...\> -- 用于表示单词的边界;
      12) 扩展的正则表达式;
      13) ? -- 匹配零或一个前面的字符;
      14) + -- 匹配一个或多个前面的字符;
      15) \{ \} -- 指示前面正则表达式匹配的次数;
      16) ( ) -- 括起一组正则表达式;
      17) | -- "或"正则操作符用于匹配一组可选的字符;
      18) POSIX字符类:[:alnum:] 匹配字母和数字.等同于A-Za-z0-9；[:alpha:] 匹配字母. 等同于A-Za-z；[:blank:] 匹配一个空格或是一个制表符(tab)；
                      [:cntrl:] 匹配控制字符；[:digit:] 匹配(十进制)数字. 等同于0-9；[:graph:] 匹配 ASCII 码值的33 - 126之间的字符；
                      [:lower:] 匹配小写字母. 等同于a-z；[:print:] 匹配 ASCII码值 32 - 126之间的字符；[:space:] 匹配空白字符 (空格符和水平制表符).
                      [:upper:] 匹配大写字母. 等同于A-Z；[:xdigit:] 匹配十六进制数字. 等同于0-9A-Fa-f。
      Bash本身没有正则表达式的功能.在脚本里，使用正则表达式的是命令和软件包 -- 例如sed和awk -- 它们可以解释正则表达式.
      
   2. Here Documents 
      here document 就是一段特殊目的的代码块，它使用I/O 重定向的形式来将一个命令序列传递到一个交互程序或者命令中, 比如ftp, cat, 或者ex文本编辑器。
          COMMAND <<InputComesFromHERE
          ...
          ...
          ...
          InputComesFromHERE
      here string 可以被认为是here document的一种定制形式. 除了COMMAND <<<$WORD 就什么都没有了, $WORD将被扩展并且被送入COMMAND的stdin中。
      
   3. I/O重定向
          默认情况下始终有3个"文件"处于打开状态, stdin (键盘), stdout (屏幕), and stderr (错误消息输出到屏幕上). 这3个文件和其他打开的文件都可以
      被重定向. 对于重定向简单的解释就是捕捉一个文件, 命令, 程序, 脚本, 或者甚至是脚本中的代码块的输出, 然后将这些输出作为输入发送到另一个文件, 命令
      程序, 或脚本中.
          其中关闭文件描述符的命令有：
            1) n<&-(关闭输入文件描述符n);
            2) 0<&-, <&- (关闭stdin);
            3) n>&- (关闭输出文件描述符n);
            4) 1>&-, >&- (关闭stdout).
          使用exec <filename 命令会将stdin重定向到文件中;同样的，使用exec >filename 命令将会把stdout重定向到一个指定的文件中；
          while, until, 和 for 循环代码块, 甚至 if/then 测试结构的代码块都能做到标准输入的重定向. 即使函数也可以使用这种重定向的格式；
      所有的这些依靠代码块结尾的 < 操作符来做到。

   4. 子shell
          运行一个shell脚本时会启动另一个命令解释器，每个shell脚本有效地运行在父shell(parent shell)的一个子进程里，这个父shell是指在一个控制终端
      或在一个xterm窗口中给你命令指示符的进程。shell脚本也能启动他自已的子进程，这些子shell(即子进程)使脚本并行地，有效率地地同时运行多个子任务.
          ( 命令1; 命令2; 命令3; ... )：嵌在圆括号里的一列命令在一个子shell里运行，子shell里的变量不能被这段子shell代码块之外外面的脚本访问；
          一个花括号内的代码块不会运行一个子shell，{ command1; command2; command3; ... }。     
      
   5. 受限shell
      在限制模式下运行脚本或脚本的一部分 会禁用某些本来可用的命令；这是一个安全措施，旨在限制脚本用户的权限，并尽量减少运行脚本可能造成的损害。
      以下命令和操作被禁用：
      1) 使用cd 命令更改工作目录;
      2) 更改环境变量$PATH, $SHELL, $BASH_ENV,或$ENV 的值;
      3) 读或更改shell环境选项变量$SHELLOPTS的值;
      4) 输出重定向; 
      5) 调用的命令路径中包括有一个或更多个/字符;
      6) 调用exec来把当前的受限shell替换成另外一个不同的进程;
      7) 脚本中许多其他无意中能破坏或捣乱的命令;
      8) 在脚本中企图脱离受限shell模式的操作.

   6. 进程替换
      进程替换则是把一个进程的输出回馈给另一个进程 (换句话说，它把一个命令的结果发送给另一个命令).
      进程替换的一般形式：
        由圆括号括起的命令
            >(command)
            <(command)  
       
   7. 函数
   
      function function_name { 
      command... 
      } 

      或
      function_name () { 
      command... 
      }
   8. 别名
   9. 列表结构
   10. 数组
   11. 间接引用
   12. /dev和/proc
   13. 网络编程
   14. 关于Zeros和Nulls
   15. 调试
   16. 选项
   17. Gotchas
   18. 脚本风格
   19. 杂项
      1) ;
      2) ;
      3) ;
      4) ; 
      5) ;
      6) ;
      7) ;
      8) ;
      9) ;
      10) ;  
   
   
   
